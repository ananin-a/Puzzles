/*
 1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂.
 –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y.
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º—á–∏–∫ –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑.
 –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã.
 –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
 3. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏
 —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.
 4. –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —è—â–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å.
 –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ —è—â–∏–∫ :)
 5. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—É–¥–∞ –Ω–∞–¥–æ —è—â–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –∏ –¥–≤–∏–≥–∞–π—Ç–µ :)

 –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ —Ä–∞–º–∫–∏ –∫–∞—Ä—Ç—ã –æ—Ç–Ω–∏–º–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å–µ. 
 –ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ —è–º—É, –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–º–∏—Ä–∞–µ—Ç. 
 */

struct Room {
    static let width = 6
    static let height = 6
}

struct Box {
    static var xCoordinate = Room.height / 2 {
        didSet {
            switch xCoordinate {
            case 0:
                xCoordinate = oldValue
            case Room.height + 1:
                xCoordinate = oldValue
            default:
                print()
            }
        }
    }
    
    static var yCoordinate = Room.width / 2 {
        didSet {
            switch yCoordinate {
            case 0:
                yCoordinate = oldValue
            case Room.width + 1:
                yCoordinate = oldValue
            default:
                print()
            }
        }
    }
    var face: Character = "üì¶"
    static var score = 0
    
    mutating func checkFinish() {
        if Box.xCoordinate == Cesspool.xCoordinate && Box.yCoordinate == Cesspool.yCoordinate {
            self .face = "‚¨õÔ∏è"
            Box.score += 1
        }
    }
}

struct Cesspool {
    static var xCoordinate = 1
    static var yCoordinate = Room.width
    var face: Character = "‚¨õÔ∏è"
}


struct Hero {
    var damage = 1
    var death: Character = "‚ò†Ô∏è"
    var health = 3 {
        didSet {
            if self .health <= 0 {
                self .face = death
                print()
                print(" üíÄ üíÄ üíÄ üíÄ>>>GAME OVER<<<üíÄ üíÄ üíÄ üíÄ")
                self .health = 0
            }
        }
    }
    var name: String
    var face: Character
    
    var xCoordinate = 1 {
        didSet {
            switch xCoordinate {
            case 0:
                xCoordinate = oldValue
                self.health -= self .damage
            case Room.width + 1:
                xCoordinate = oldValue
                self.health -= self .damage
            default:
                print()
            }
        }
    }
    
    var yCoordinate = 1 {
        didSet {
            switch yCoordinate {
            case 0:
                yCoordinate = oldValue
                self.health -= self .damage
            case Room.height + 1:
                yCoordinate = oldValue
                self.health -= self .damage
            default:
                print()
            }
        }
    }
    
    enum MovieDirection {
        case up, down, left, right
    }
    
    mutating func checkGoToCesspool() {
        if self .xCoordinate == Cesspool.xCoordinate && self .yCoordinate == Cesspool.yCoordinate {
            self .health = 0
        }
    }
    
    func checkCellOccupied() -> Bool {
        if self.xCoordinate == Box.xCoordinate && self .yCoordinate == Box.yCoordinate {
            return false
        }
        return true
    }
    
    mutating func moveTo(_ movie: MovieDirection) {
        if self .face != self .death && checkCellOccupied() {
            switch movie {
            case .up:
                yCoordinate -= 1
                checkGoToCesspool()
                if yCoordinate == Box.yCoordinate && xCoordinate == Box.xCoordinate {
                    Box.yCoordinate -= 1
                    box.checkFinish()
                }
            case .down:
                yCoordinate += 1
                checkGoToCesspool()
                if yCoordinate == Box.yCoordinate && xCoordinate == Box.xCoordinate {
                    Box.yCoordinate += 1
                    box.checkFinish()
                }
            case .left:
                xCoordinate -= 1
                checkGoToCesspool()
                if xCoordinate == Box.xCoordinate && yCoordinate == Box.yCoordinate {
                    Box.xCoordinate -= 1
                    box.checkFinish()
                }
            case .right:
                xCoordinate += 1
                checkGoToCesspool()
                if xCoordinate == Box.xCoordinate && yCoordinate == Box.yCoordinate {
                    Box.xCoordinate += 1
                    box.checkFinish()
                    
                }
            }
        } else {
            print()
            print(" üíÄ üíÄ üíÄ üíÄ>>>GAME OVER<<<üíÄ üíÄ üíÄ üíÄ")
        }
    }
}

let room = Room()
var box = Box()
let cesspool = Cesspool()
var hero = Hero(name: "Hero", face: "ü§†")

func printTopAndBotton() {
    for _ in 1...Room.height + 2 {
        print("üå≤", terminator: " ")
    }
    print()
}

// print a room with a hero
func printRoom(_ room: Room, withHero hero: Hero, andBox box: Box, andCesspool cesspool: Cesspool) {
    if hero.health > 0 {
        print()
        print("  Hero \(hero.name) with a level of health = \(hero.health)")
        print("  Score = \(Box.score)")
    } else {
        print()
    }
    printTopAndBotton()
    for y in 1...Room.width {
        print("üå≤", terminator: " ")
        for x in 1...Room.height {
            switch (hero.xCoordinate, hero.yCoordinate,
                    Box.xCoordinate, Box.yCoordinate,
                    Cesspool.xCoordinate, Cesspool.yCoordinate) {
            case (x, y, _, _, _, _):
                print(hero.face, terminator: " ")
            case (_, _, x, y, _, _):
                print(box.face, terminator: " ")
            case (_, _, _, _, x, y):
                print(cesspool.face, terminator: " ")
            default:
                print("‚¨úÔ∏è", terminator: " ")
            }
        }
        print("üå≤", terminator: "")
        print()
    }
    printTopAndBotton()
}

func moveTo(room: Room, hero: inout Hero , move: Hero.MovieDirection) {
    hero.moveTo(move)
    printRoom(room, withHero: hero, andBox: box, andCesspool: cesspool)
}

printRoom(room, withHero: hero, andBox: box, andCesspool: cesspool)

moveTo(room: room, hero: &hero, move: .right)
moveTo(room: room, hero: &hero, move: .right)
moveTo(room: room, hero: &hero, move: .down)
moveTo(room: room, hero: &hero, move: .down)
moveTo(room: room, hero: &hero, move: .down)
moveTo(room: room, hero: &hero, move: .down)
moveTo(room: room, hero: &hero, move: .right)
moveTo(room: room, hero: &hero, move: .down)
moveTo(room: room, hero: &hero, move: .left)
moveTo(room: room, hero: &hero, move: .left)
moveTo(room: room, hero: &hero, move: .left)
